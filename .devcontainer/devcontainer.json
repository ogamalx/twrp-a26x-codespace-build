#!/bin/bash

# build_twrp.sh
# This script automates the TWRP compilation process inside the Docker container.

echo "Starting TWRP build process..."

# Navigate to the TWRP build directory
cd /home/twrpbuilder/twrp-build

# Step 1: Sync the TWRP sources
echo "Syncing TWRP sources..."
repo sync -j$(nproc --all)

if [ $? -ne 0 ]; then
    echo "Error: repo sync failed. Exiting."
    exit 1
fi
echo "TWRP sources synced successfully."

# Step 2: Clone the device tree repository and copy the device tree
echo "Cloning device tree repository..."
# Temporarily clone to a temp directory to get the device tree
git clone https://gitgud.io/fw-dumps/samsung/a26x.git /tmp/a26x_device_tree

if [ $? -ne 0 ]; then
    echo "Error: Failed to clone device tree repository. Exiting."
    exit 1
fi
echo "Device tree repository cloned."

echo "Copying device tree to TWRP sources..."
# Ensure the target directory exists
mkdir -p device/samsung/
# Copy the 'a26x' folder from the cloned repo to the TWRP sources
cp -r /tmp/a26x_device_tree/twrp-device-tree/samsung/a26x device/samsung/

if [ $? -ne 0 ]; then
    echo "Error: Failed to copy device tree. Exiting."
    exit 1
fi
echo "Device tree copied successfully."

# Clean up the temporary device tree clone
rm -rf /tmp/a26x_device_tree

# Step 3: Initialize the build environment
echo "Initializing build environment..."
. build/envsetup.sh

# Step 4: Select the device for compilation
DEVICE_CODENAME="a26x"
echo "Selecting device: omni_${DEVICE_CODENAME}-eng"
lunch omni_${DEVICE_CODENAME}-eng

if [ $? -ne 0 ]; then
    echo "Error: lunch command failed. Exiting."
    exit 1
fi
echo "Device selected successfully."

# Step 5: Build the recovery image
echo "Starting TWRP recovery image compilation..."
# Since A/B Device is false, we use mka recoveryimage
mka recoveryimage

if [ $? -ne 0 ]; then
    echo "Error: TWRP compilation failed. Check logs above for details."
    exit 1
fi
echo "TWRP recovery image compiled successfully!"

# Step 6: Inform user about the output location
OUTPUT_DIR="out/target/product/${DEVICE_CODENAME}"
echo "Your recovery.img should be located in: ${OUTPUT_DIR}/recovery.img"
echo "You can copy it from the container to your host using 'docker cp'."

# Keep the container running for inspection if needed (optional, for debugging)
# tail -f /dev/null

